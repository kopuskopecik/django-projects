def hepsi():
    return [['Numbers', 'Integers', 'Decinteger', 'Bininteger', 'Octinteger', 'Hexinteger', 'Converting integers', 'Floats', 'Complex numbers', 'Common number methods and attributes', 'Integer methods', 'Float methods', 'math', 'math methods and attributes', 'ceil(x)', 'floor(x)', 'radians(x)', 'degrees(x)', 'sin(x)', 'cos(x)', 'tan(x)', 'acos(x)', 'asin(x)', 'atan(x)', 'atan2(y, x)', 'cosh(x)', 'sinh(x)', 'tanh(x)', 'copysign(x, y)', 'erf(x)', 'erfc(x)', 'exp(x)', 'expm1(x)', 'fabs()', 'factorial(x)', 'fmod(x, y)', 'frexp(x)', 'fsum(x)', 'gamma(x)', 'gcd(x, y)', 'hypot(x, y)', 'isclose()', 'isfinite(x)', 'isinf(x)', 'isnan(x)', 'ldexp(x, i)', 'lgamma(x)', 'log(x, y)', 'log10(x)', 'log2(x)', 'log1p(x)', 'modf(x)', 'pow(x, y)', 'sqrt(x)', 'trunc(x)', 'Sets', 'Define sets', 'Set features', 'Set methods', 'clear()', 'copy()', 'add()', 'difference()', 'difference_update()', 'discard()', 'remove()', 'intersection()', 'intersection_update()', 'isdisjoint', 'issubset()', 'issuperset()', 'union()', 'set.update()', 'symmetric_difference()', 'symmetric_difference_ update', 'pop()', 'Frozensets', 'Define frozensets', 'Frozenset features', 'Frozenset methods', 'copy()', 'difference()', 'intersection()', 'isdisjoint()', 'issubset()', 'isupperset()', 'union()', 'symmetric_ difference()', 'try except- catching exceptions', 'try except', 'try except as', 'try except else', 'try except finally', 'raise', 'catching all errors'], ['<p>Python has three kinds of number.&nbsp;</p>\r\n\r\n<p>1. Integers&nbsp; : 0 , 1,&nbsp; 2,&nbsp; 100, -25</p>\r\n\r\n<p>2. Floats&nbsp; &nbsp; &nbsp;: 0.1,&nbsp; 5.5,&nbsp; 12.5,&nbsp; -15.9</p>\r\n\r\n<p>3. Complex :&nbsp;3+4j, 5+5j, 21+15j</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; <span style="color:#1abc9c;">12</span><br />\r\n12</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; <span style="color:#1abc9c;">12.5</span><br />\r\n12.5</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; <span style="color:#1abc9c;">-12</span><br />\r\n-12</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; <span style="color:#1abc9c;">31 + 4j</span><br />\r\n(31+4j)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type(<span style="color:#1abc9c;">12</span>)<br />\r\n&lt;class &#39;int&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type(<span style="color:#1abc9c;">12.5</span>)<br />\r\n&lt;class &#39;float&#39;&gt;</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type(<span style="color:#1abc9c;">3 + 4j</span>)<br />\r\n&lt;class &#39;complex&#39;&gt;</tt></p>\r\n</div>', '<p>In Python There are four kinds of integers. They are&nbsp;decinteger, bininteger,&nbsp;octinteger, hexinteger.</p>\r\n\r\n<p>7 &nbsp; &nbsp;</p>\r\n\r\n<p>2147483647 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>0o177 &nbsp; &nbsp;</p>\r\n\r\n<p>0b100110111&nbsp; &nbsp;</p>\r\n\r\n<p>3 &nbsp; &nbsp;</p>\r\n\r\n<p>79228162514264337593543950336 &nbsp; &nbsp;</p>\r\n\r\n<p>0o377 &nbsp; &nbsp;</p>\r\n\r\n<p>0xdeadbeef</p>\r\n\r\n<p>100_000_000_000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>\r\n\r\n<p>0b_1110_0101</p>\r\n\r\n<p>&nbsp;</p>', '<p>Decintegers have ten digits which are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">45</span><br />\r\n45</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> type(<span style="color:#1abc9c;">-50</span>)<br />\r\n&lt;class &#39;int&#39;&gt;</tt></p>\r\n</div>', '<p>Binintegers have two digits which are 0 and 1. To construct them,&nbsp;<strong>0b</strong> or&nbsp;<strong>0B&nbsp;</strong>is used in the beginning of these digits.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">0b1</span><br />\r\n1</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">0B10</span><br />\r\n2</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> -<span style="color:#1abc9c;">0b10</span><br />\r\n-2</tt></p>\r\n</div>', '<p>Octintegers have eight digits which are 0, 1, 2, 3, 4, 5, 6, 7.&nbsp;0o&nbsp;or 0O is used to contsruct them.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">0o57</span><br />\r\n47</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> -<span style="color:#1abc9c;">0o56</span><br />\r\n-46</tt></p>\r\n</div>', '<p>Hexintegers have 16 digits which are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C ,D, E, F.&nbsp;0x or 0X is used to contruct them.</p>\r\n\r\n<p><strong>A-10, B-11, C-12, D-13, E-14, F-15</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> 0xA<br />\r\n10</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> 0X11<br />\r\n17</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> -0xB<br />\r\n-11</tt></p>\r\n</div>', '<p>bin(), oct(), hex() bıilt-in function are used to convert integers into each other. Alsa int() function can be used to do for it.</p>\r\n\r\n<div class="codes">\r\n<p><tt><code># to binintegers</code><br />\r\n<span style="color:red">&gt;&gt;&gt;</span> bin(<span style="color:#1abc9c;">8</span>)<br />\r\n&#39;0b1000&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> bin(<span style="color:#1abc9c;">0x16</span>)<br />\r\n&#39;0b10110&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> bin(<span style="color:#1abc9c;">0o7</span>)<br />\r\n&#39;0b111&#39;</tt></p>\r\n\r\n<p><tt><code>#&nbsp;to octintegers</code><br />\r\n<span style="color:red">&gt;&gt;&gt;</span> oct(<span style="color:#1abc9c;">8</span>)<br />\r\n&#39;0o10&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> oct(<span style="color:#1abc9c;">0x16</span>)<br />\r\n&#39;0o26&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> oct(<span style="color:#1abc9c;">0b1000</span>)<br />\r\n&#39;0o10&#39;</tt></p>\r\n\r\n<p><tt><code># to hexintegers</code><br />\r\n<span style="color:red">&gt;&gt;&gt;</span> hex(<span style="color:#1abc9c;">0o21</span>)<br />\r\n&#39;0x11&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> hex(<span style="color:#1abc9c;">16</span>)<br />\r\n&#39;0x10&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> hex(<span style="color:#1abc9c;">0b100</span>)<br />\r\n&#39;0x4&#39;</tt></p>\r\n\r\n<p><tt><code># to decintegers</code><br />\r\n<span style="color:red">&gt;&gt;&gt;</span> int(<span style="color:#1abc9c;">0xA</span>)<br />\r\n10</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> int(<span style="color:#1abc9c;">0b10</span>)<br />\r\n2</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> int(<span style="color:#1abc9c;">0o16</span>)<br />\r\n14</tt></p>\r\n</div>', '<p>In Python there are two types floats. First one is pointfloat like: 3.14 &nbsp; &nbsp;10. &nbsp; &nbsp;.001. Second one is exponentfloat like: 1e100 &nbsp; &nbsp;3.14e-10. e means 10 and number after e means exponential number.&nbsp;</p>\r\n\r\n<p>1e100&nbsp;&rArr; 1*10**100</p>\r\n\r\n<p>3.14e-10&nbsp;&rArr; 3.14*10**-10</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; <span style="color:#1abc9c;">3.14</span><br />\r\n3.14</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">1e1</span><br />\r\n10.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">2e1</span><br />\r\n20.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">0e0</span><br />\r\n0.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> type(<span style="color:#1abc9c;">10.0</span>)<br />\r\n&lt;class &#39;float&#39;&gt;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> type(1e100)<br />\r\n&lt;class &#39;float&#39;&gt;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> 1e-1<br />\r\n0.1</tt></p>\r\n</div>\r\n\r\n<p>float() function is used to define convert number elements(strings or number) into float.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> float(&quot;<span style="color:#e67e22;">10.5</span>&quot;)<br />\r\n10.5</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> float(<span style="color:#1abc9c;">10</span>)<br />\r\n10.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> float(<span style="color:#1abc9c;">0b10</span>)<br />\r\n2.0</tt></p>\r\n</div>', '<p>Complex numbers have two parts. First&nbsp;one is real part which is actually float number. Second one is imaginary part which is defined with <strong>j </strong>or <strong>J </strong>character.</p>\r\n\r\n<p>3.14j &nbsp; 10.j &nbsp; &nbsp;10j &nbsp; &nbsp; .001j &nbsp; 1e100j &nbsp; 3.14e-10j</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">3 </span>+ <span style="color:#1abc9c;">4j</span><br />\r\n(3+4j)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">2 </span>+ <span style="color:#1abc9c;">7j</span><br />\r\n(2+7j)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">2j</span><br />\r\n2j</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">3.14e-10j</span><br />\r\n3.14e-10j</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> complex(<span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>)<br />\r\n(3+4j)</tt>&nbsp;</p>\r\n</div>', '<p>Integers, floats and complex numbers have&nbsp;real, imag atrributes and&nbsp;conjugate() methods.</p>\r\n\r\n<h4>conjugate<strong>()</strong></h4>\r\n\r\n<p>Returns self, the complex conjugate of any int. İt is useful for complex numbers.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; (<span style="color:#1abc9c;">2</span>).conjugate()<br />\r\n2</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; (-<span style="color:#1abc9c;">10</span>).conjugate()<br />\r\n-10</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; (-<span style="color:#1abc9c;">10</span>+ <span style="color:#1abc9c;">5j</span>).conjugate()<br />\r\n(-10-5j)</tt></p>\r\n</div>\r\n\r\n<h4>real</h4>\r\n\r\n<p>the real part of a number, especially of a complex number.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">5 </span>+ <span style="color:#1abc9c;">4j</span>.real<br />\r\n5.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">5</span>.real<br />\r\n<span style="color:#e74c3c;">SyntaxError: invalid syntax</span></tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (<span style="color:#1abc9c;">5</span>).real<br />\r\n5</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">5.5</span>.real<br />\r\n5.5</tt></p>\r\n</div>\r\n\r\n<h4>imag</h4>\r\n\r\n<p>the imaginary part of a complex number. It returns 0 for integers and 0.0 for floats.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; (<span style="color:#1abc9c;">5 </span>+ <span style="color:#1abc9c;">4j</span>).imag<br />\r\n4.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (<span style="color:#1abc9c;">5</span>).imag<br />\r\n0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">5.5</span>.imag<br />\r\n0.0</tt></p>\r\n</div>', '<p>Integers have&nbsp;bit_length(),&nbsp;from_bytes(),&nbsp;numerator() and&nbsp; to_bytes() methods.&nbsp;</p>\r\n\r\n<h4>bit_length()</h4>\r\n\r\n<p>It returns number of bits necessary to represent self in binary.</p>\r\n\r\n<p>int.bit_length() -&gt; int</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (37).bit_length()<br />\r\n6</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> bin(37)<br />\r\n&#39;0b100101&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (0o10).bit_length()<br />\r\n4</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (0xA).bit_length()<br />\r\n4</tt></p>\r\n</div>\r\n\r\n<h4><span style="color:null">from_bytes()</span></h4>\r\n\r\n<p>Return the integer represented by the given array of bytes.</p>\r\n\r\n<p>int.from_bytes(bytes, byteorder)</p>\r\n\r\n<p><strong>bytes</strong>: it must be a bytes-like object (e.g. bytes or bytearray)</p>\r\n\r\n<p><strong>byteorder:</strong> determines the byte order used to represent the&nbsp;integer. If byteorder is &#39;big&#39;, the most significant byte is at the beginning of the byte array. &nbsp;If byteorder is &#39;little&#39;, the most significant byte is at the end of the byte array. &nbsp;To request the native byte order of the host system, use `sys.byteorder&#39; as the byte order value.(Python docs)</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> int.from_bytes(b&#39;A&#39;, &quot;little&quot;)<br />\r\n65</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> int.from_bytes(b&#39;ABN&#39;, &quot;little&quot;)<br />\r\n5128769</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> int.from_bytes(b&#39;ABN&#39;, &quot;big&quot;)<br />\r\n4276814</tt></p>\r\n</div>\r\n\r\n<h4>to_bytes()</h4>\r\n\r\n<p>Return an array of bytes representing an integer.</p>\r\n\r\n<p>int.from_bytes(byte_length, byteorder)</p>\r\n\r\n<p><b>byte_length</b>= The integer is represented using length bytes. &nbsp;An OverflowError is raised if the integer is not representable with the given number of bytes.<br />\r\n<strong>byte_order:</strong> determines the byte order used to represent the&nbsp;integer. If byteorder is &#39;big&#39;, the most significant byte is at the beginning of the byte array. &nbsp;If byteorder is &#39;little&#39;, the most significant byte is at the end of the byte array. &nbsp;To request the native byte order of the host system, use `sys.byteorder&#39; as the byte order value.(Python docs)</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (65).to_bytes(1, &quot;little&quot;)<br />\r\nb&#39;A&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (1254).to_bytes(2, &quot;little&quot;)<br />\r\nb&#39;\\xe6\\x04&#39;</tt></p>\r\n</div>', '<p>Floats have as_integer_ratio(), fromhex(), hex() and&nbsp;is_integer() methods</p>\r\n\r\n<h4>as_integer_ratio()</h4>\r\n\r\n<p>Return a pair of integers, whose ratio is exactly equal to the original float and with a positive denominator. Raise OverflowError on infinities and a ValueError on NaNs</p>\r\n\r\n<p>float.as_integer_ratio() -&gt; (int, int)</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (<span style="color:#1abc9c;">10.0</span>).as_integer_ratio()<br />\r\n(10, 1)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (<span style="color:#1abc9c;">0.0</span>).as_integer_ratio()<br />\r\n(0, 1)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (-<span style="color:#1abc9c;">0.25</span>).as_integer_ratio()<br />\r\n(-1, 4)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">0.33</span>.as_integer_ratio()<br />\r\n(5944751508129055, 18014398509481984)</tt></p>\r\n</div>\r\n\r\n<h4>fromhex()</h4>\r\n\r\n<p>Create a floating-point number from a hexadecimal string.</p>\r\n\r\n<p>float.fromhex(string) -&gt; float</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> float.fromhex(&quot;<span style="color:#e67e22;">0xAB</span>&quot;)<br />\r\n171.0</tt></p>\r\n</div>\r\n\r\n<h4>hex()</h4>\r\n\r\n<p>Return a hexadecimal representation of a floating-point number.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> <span style="color:#1abc9c;">10.5</span>.hex()<br />\r\n&#39;0x1.5000000000000p+3&#39;</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> (-<span style="color:#1abc9c;">0.1</span>).hex()<br />\r\n&#39;-0x1.999999999999ap-4&#39;</tt></p>\r\n</div>\r\n\r\n<h4>is_integer()</h4>\r\n\r\n<p>Return True if the float is an integer</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> 5.0.is_integer()<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> 5.5.is_integer()<br />\r\nFalse</tt></p>\r\n</div>', '<p>It is built-in modules in Python.&nbsp;This module is always available. &nbsp;It provides access to the useful mathematical functions defined by the C standard. In order to use it, we must import it like this:</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; import math</tt></p>\r\n</div>\r\n\r\n<p>&nbsp;</p>', '<p>We can list the methods and attributes of math module using dir() function.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> dir(math)<br />\r\n[&#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, <strong>&#39;acos&#39;, &#39;acosh&#39;, &#39;asin&#39;, &#39;asinh&#39;, &#39;atan&#39;, &#39;atan2&#39;, &#39;atanh&#39;, &#39;ceil&#39;, &#39;copysign&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;degrees&#39;, &#39;e&#39;, &#39;erf&#39;, &#39;erfc&#39;, &#39;exp&#39;, &#39;expm1&#39;, &#39;fabs&#39;, &#39;factorial&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;frexp&#39;, &#39;fsum&#39;, &#39;gamma&#39;, &#39;gcd&#39;, &#39;hypot&#39;, &#39;inf&#39;, &#39;isclose&#39;, &#39;isfinite&#39;, &#39;isinf&#39;, &#39;isnan&#39;, &#39;ldexp&#39;, &#39;lgamma&#39;, &#39;log&#39;, &#39;log10&#39;, &#39;log1p&#39;, &#39;log2&#39;, &#39;modf&#39;, &#39;nan&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;radians&#39;, &#39;sin&#39;, &#39;sinh&#39;, &#39;sqrt&#39;, &#39;tan&#39;, &#39;tanh&#39;, &#39;tau&#39;, &#39;trunc&#39;</strong>]</tt></p>\r\n</div>\r\n\r\n<h4>Attributes</h4>\r\n\r\n<p>math module has some mathemetical constants like pi number. In order to reach these constants, we can use dot notation like below examples.</p>\r\n\r\n<p><strong>e</strong> = 2.718281828459045&nbsp;&rArr; e number<br />\r\n<strong>inf</strong> = inf&nbsp;&rArr;&nbsp;<br />\r\n<strong>nan</strong> = nan&nbsp;&rArr; tanımsız (sayı değerli olmayan)<br />\r\n<strong>pi </strong>= 3.141592653589793&nbsp;<br />\r\n<strong>tau</strong> = 6.283185307179586&nbsp;&rArr; tau sayısı&nbsp;&rArr; 2*pi</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> import math</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.e<br />\r\n2.718281828459045</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.inf<br />\r\ninf</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.nan<br />\r\nnan</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.pi<br />\r\n3.141592653589793</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.tau<br />\r\n6.283185307179586</tt></p>\r\n</div>', '<p>Return the ceiling of x as an Integral. This is the smallest integer &gt;= x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.ceil(8.5)<br />\r\n9</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.ceil(8.3)<br />\r\n9</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.ceil(8.7)<br />\r\n9</tt></p>\r\n</div>', '<p>Return the floor of x as an Integral. This is the largest integer &lt;= x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.floor(8.5)<br />\r\n8</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.floor(8.7)<br />\r\n8</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.floor(8.3)<br />\r\n8</tt></p>\r\n</div>', '<p>Convert angle x from degrees to radians.</p>\r\n\r\n<p>0&nbsp;&rArr; 0.0*pi<br />\r\n30&nbsp;&rArr; pi/6<br />\r\n60 &rArr; pi/3<br />\r\n90&nbsp;&rArr; pi/2<br />\r\n180 &rArr; pi<br />\r\n360&nbsp;&rArr; 2*pi</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.radians(0)<br />\r\n0.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.radians(30)<br />\r\n0.5235987755982988</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.radians(60)<br />\r\n1.0471975511965976</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.radians(90)<br />\r\n1.5707963267948966</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.radians(180)<br />\r\n3.141592653589793</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.radians(360)<br />\r\n6.283185307179586</tt></p>\r\n</div>', '<p>Convert angle x from radians to degrees.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.degrees(math.pi)<br />\r\n180.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.degrees(math.pi/2)<br />\r\n90.0</tt></p>\r\n</div>', '<p>Return the sine of x (measured in radians).</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.sin(math.pi/2)<br />\r\n1.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.sin(math.radians(30))<br />\r\n0.49999999999999994</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.sin(1.5707963267948966)<br />\r\n1.0</tt></p>\r\n</div>', '<p>Return the cosine of x (measured in radians).</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.cos(math.pi/3)<br />\r\n0.5000000000000001<br />\r\n<span style="color:red">&gt;&gt;&gt;</span> math.cos(math.radians(180))<br />\r\n-1.0</tt></p>\r\n</div>', '<p>Return the tangent of x (measured in radians).</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.tan(math.pi/4)<br />\r\n0.9999999999999999</tt></p>\r\n</div>', '<p>Return the arc cosine (measured in radians) of x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.acos(-1)<br />\r\n3.141592653589793</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.acos(1)<br />\r\n0.0</tt></p>\r\n</div>', '<p>Return the arc sine (measured in radians) of x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.asin(1)<br />\r\n1.5707963267948966</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.asin(-1)<br />\r\n-1.5707963267948966</tt></p>\r\n</div>', '<p>Return the arc tangent (measured in radians) of x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.atan(math.inf)<br />\r\n1.5707963267948966</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.atan(-math.inf)<br />\r\n-1.5707963267948966</tt></p>\r\n</div>', '<p>Return the arc tangent (measured in radians) of y/x. Unlike atan(y/x), the signs of both x and y are considered.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.atan2(1, 1)<br />\r\n0.7853981633974483</tt></p>\r\n</div>', '<p>Return the hyperbolic cosine of x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.cosh(0)<br />\r\n1.0</tt></p>\r\n</div>', '<p>Return the hyperbolic sine of x.</p>\r\n\r\n<div class="codes">\r\n<h4><tt><span style="color:red">&gt;&gt;&gt;</span> math.sinh(0)<br />\r\n0.0</tt></h4>\r\n</div>', '<p>Return the hyperbolic tangent of x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.tanh(1)<br />\r\n0.7615941559557649</tt></p>\r\n</div>', '<p>Return a float with the magnitude (absolute value) of x but the sign&nbsp;of y. On platforms that support signed zeros, copysign(1.0, -0.0)&nbsp;returns -1.0.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.copysign(15, -2)<br />\r\n-15.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.copysign(-15, -2)<br />\r\n-15.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.copysign(-15, 2)<br />\r\n15.0</tt></p>\r\n</div>', '<p>Error function at x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.erf(math.inf)<br />\r\n1.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.erf(-math.inf)<br />\r\n-1.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.erf(0)<br />\r\n0.0</tt></p>\r\n</div>', '<p>Complementary error function at x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.erf(-math.inf)<br />\r\n-1.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.erfc(-math.inf)<br />\r\n2.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.erf(180)<br />\r\n1.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.erfc(180)<br />\r\n0.0</tt></p>\r\n</div>', '<p>Return e raised to the power of x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.exp(1)<br />\r\n2.718281828459045</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.e<br />\r\n2.718281828459045</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.exp(2)<br />\r\n7.38905609893065</tt></p>\r\n</div>', '<p>Return exp(x)-1. This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.expm1(1)<br />\r\n1.718281828459045</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.expm1(2)<br />\r\n6.38905609893065</tt></p>\r\n</div>', '<p>Return the absolute value of the float x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.fabs(10/9)<br />\r\n1.1111111111111112</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.fabs(1e-8000)<br />\r\n0.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.fabs(7.389056098930655454554554545)<br />\r\n7.389056098930656</tt></p>\r\n</div>', '<p>Find x!. Raise a ValueError if x is negative or non-integral.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.factorial(3)<br />\r\n6</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.factorial(6)<br />\r\n720</tt></p>\r\n</div>', '<p>Return fmod(x, y), according to platform C. &nbsp;x % y may differ.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.fmod(10, 3)<br />\r\n1.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.fmod(10, 2)<br />\r\n0.0</tt></p>\r\n</div>', '<p>Return the mantissa and exponent of x, as pair (m, e).</p>\r\n\r\n<p>m is a float and e is an int, such that x = m * 2.**e.</p>\r\n\r\n<p>If x is 0, m and e are both 0. &nbsp;Else 0.5 &lt;= abs(m) &lt; 1.0.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.frexp(7)<br />\r\n(0.875, 3)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.frexp(0)<br />\r\n(0.0, 0)</tt></p>\r\n</div>', '<p>Return an accurate floating point sum of values in the iterable. Assumes IEEE-754 floating point arithmetic.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.fsum([math.pi, math.e, math.tau])<br />\r\n12.143059789228424</tt></p>\r\n</div>', '<p>Gamma function at x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.gamma(math.inf)<br />\r\ninf</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.gamma(10)<br />\r\n362880.0</tt></p>\r\n</div>', '<p>gcd(x, y) -&gt; int</p>\r\n\r\n<p>greatest common divisor of x and y</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.gcd(6, 9)<br />\r\n3</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.gcd(12, 20)<br />\r\n4</tt></p>\r\n</div>', '<p>Return the Euclidean distance, sqrt(x*x + y*y).</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.hypot(3, 4)<br />\r\n5.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.hypot(5, 12)<br />\r\n13.0</tt></p>\r\n</div>', '<p>isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0) -&gt; bool</p>\r\n\r\n<p>Determine whether two floating point numbers are close in value.<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp;rel_tol<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;maximum difference for being considered &quot;close&quot;, relative to the<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;magnitude of the input values<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; abs_tol<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;maximum difference for being considered &quot;close&quot;, regardless of the<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;magnitude of the input values<br />\r\n&nbsp; &nbsp;&nbsp;<br />\r\nReturn True if a is close in value to b, and False otherwise.</p>\r\n\r\n<p>For the values to be considered close, the difference between them must be smaller than at least one of the tolerances.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isclose(4,3)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isclose(4,3, abs_tol=1.0)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isclose(4,3, rel_tol=1.0)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isclose(-4,3, rel_tol=1, abs_tol=0.5)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isclose(-4,3, rel_tol=0.5, abs_tol=1)<br />\r\nFalse</tt></p>\r\n</div>', '<p>Return True if x is neither an infinity nor a NaN, and False otherwise.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isfinite(120)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isfinite(math.inf)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isfinite(math.nan)<br />\r\nFalse</tt></p>\r\n</div>', '<p>Return True if x is a positive or negative infinity, and False otherwise.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isinf(math.inf)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isinf(-math.inf)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isinf(math.nan)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isinf(125478.8788)<br />\r\nFalse</tt></p>\r\n</div>', '<p>Return True if x is a NaN (not a number), and False otherwise.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isnan(math.nan)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.isnan(math.inf)<br />\r\nFalse</tt></p>\r\n</div>', '<p>Return x * (2**i).</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.ldexp(10, 2)<br />\r\n40.0</tt></p>\r\n</div>', '<p>Natural logarithm of absolute value of Gamma function at x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.lgamma(100)<br />\r\n359.1342053695754</tt></p>\r\n</div>', '<p>Return the logarithm of x to the given base. If the base not specified, returns the natural logarithm (base e) of x.</p>\r\n\r\n<p>log<sub>y</sub>x</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.log(math.e)<br />\r\n1.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.log(10, 10)<br />\r\n1.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.log(2, 2)<br />\r\n1.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.log(3, 3)<br />\r\n1.0</tt></p>\r\n</div>', '<p>Return the base 10 logarithm of x.</p>\r\n\r\n<p>log<sub>10</sub>x</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.log10(100)<br />\r\n2.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.log10(1000)<br />\r\n3.0</tt></p>\r\n</div>', '<p>Return the base 2 logarithm of x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.log2(2)<br />\r\n1.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.log2(16)<br />\r\n4.0</tt></p>\r\n</div>', '<p>Return the natural logarithm of 1+x (base e).</p>\r\n\r\n<p>The result is computed in a way which is accurate for x near zero.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.log1p(math.e)<br />\r\n1.3132616875182228</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.log1p(0)<br />\r\n0.0</tt></p>\r\n</div>', '<p>Return the fractional and integer parts of x. &nbsp;Both results carry the sign of x and are floats.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.modf(-5.5)<br />\r\n(-0.5, -5.0)</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.modf(5.5)<br />\r\n(0.5, 5.0)</tt></p>\r\n</div>', '<p>Return x**y (x to the power of y).</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.pow(3,2)<br />\r\n9.0</tt></p>\r\n</div>', '<p>Return the square root of x.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.sqrt(25)<br />\r\n5.0</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.sqrt(2)<br />\r\n1.4142135623730951</tt></p>\r\n</div>', '<p>Truncates x to the nearest Integral toward 0. Uses the __trunc__ magic method.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.trunc(12.02122)<br />\r\n12</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.trunc(11.98)<br />\r\n11</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> math.trunc(-12.5)<br />\r\n-12</tt></p>\r\n</div>', '<p>Python has a set type like list, tuple. But The sets do not have any character to construct itself. like [], () or {} so It is used to set() function to construct sets.</p>\r\n\r\n<p>We already know sets from mathematic so you can use all operation about sets like mathematic such as: intersection, union, difference.</p>\r\n\r\n<p>The sets are mutable.</p>', '<p>We have three&nbsp;options to define a set.</p>\r\n\r\n<p>1. set() -&gt; new empty set object</p>\r\n\r\n<p>2. set(iterable) -&gt; new set object</p>\r\n\r\n<p>3. Using {} character&nbsp;</p>\r\n\r\n<p>An iterable can be string, list, tuple...</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; set()<br />\r\nset()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; set(&quot;<span style="color:#e67e22;">abcdefgh</span>&quot;)<br />\r\n{&#39;f&#39;, &#39;g&#39;, &#39;a&#39;, &#39;d&#39;, &#39;h&#39;, &#39;c&#39;, &#39;b&#39;, &#39;e&#39;}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; set([&quot;<span style="color:#e67e22;">John</span>&quot;, &quot;<span style="color:#e67e22;">Jack</span>&quot;, &quot;<span style="color:#e67e22;">Brad</span>&quot;, &quot;<span style="color:#e67e22;">Angelina</span>&quot;])<br />\r\n{&#39;John&#39;, &#39;Angelina&#39;, &#39;Brad&#39;, &#39;Jack&#39;}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; {<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>}<br />\r\n{1, 2, 3}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt;&nbsp;type({<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>})<br />\r\n&lt;class &#39;set&#39;&gt;</tt></p>\r\n</div>\r\n\r\n<p>Remember that {} command define an empty dictionary.&nbsp;</p>', '<p>1. The sets can&#39;t have same item which can be one in a&nbsp;set.</p>\r\n\r\n<p>Such as :&nbsp;&quot;banana&quot; string has three&nbsp;&quot;a&quot; and two&nbsp;&quot;n&quot;, set has only one &quot;a&quot; and one &quot;n&quot; character.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; set(&quot;<span style="color:#e67e22;">banana</span>&quot;)<br />\r\n{&#39;b&#39;, &#39;a&#39;, &#39;n&#39;}</tt></p>\r\n</div>\r\n\r\n<p>2. Sets&nbsp;do&nbsp;not support indexing.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = &nbsp;set([&quot;<span style="color:#e67e22;">John</span>&quot;, &quot;<span style="color:#e67e22;">Jack</span>&quot;, &quot;<span style="color:#e67e22;">Brad</span>&quot;, &quot;<span style="color:#e67e22;">Angelina</span>&quot;])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">0</span>]<br />\r\n<span style="color:#e74c3c;">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#5&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; a[0]<br />\r\nTypeError: &#39;set&#39; object does not support indexing</span></tt></p>\r\n</div>\r\n\r\n<p>3. The sets can be constructed using {} but don&#39;t forget that&nbsp;{} is special for dictionaries. So you can&#39;t make an empty set. If you try, it is obtained an empty dictyionary.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; {&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, &quot;<span style="color:#e67e22;">v</span>&quot;}<br />\r\n{&#39;v&#39;, &#39;b&#39;, &#39;a&#39;}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; type({})<br />\r\n&lt;class &#39;dict&#39;&gt;</tt></p>\r\n</div>\r\n\r\n<p>4. An Element&nbsp;of a set can be only immutable type which are string, tuple and number. So you can&#39;t add list, dictionary and set inside it.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, [&quot;<span style="color:#e67e22;">nested_list</span>&quot;]])<br />\r\n<span style="color:#e74c3c;">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#84&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; a = set([&quot;a&quot;, &quot;b&quot;, [&quot;nested_list&quot;]])<br />\r\n<strong>TypeError: unhashable type: &#39;list&#39;</strong></span></tt></p>\r\n</div>\r\n\r\n<p>5.&nbsp;Set Comprehensions</p>\r\n\r\n<p>It is used {} to do with for statement.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; our_list = list(range(<span style="color:#1abc9c;">200</span>))</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; our_list<br />\r\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; our_set = {i for i in our_list if <span style="color:#1abc9c;">150 </span>&lt; i &lt; <span style="color:#1abc9c;">175</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; our_set<br />\r\n{151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174}</tt></p>\r\n</div>\r\n\r\n<p>6. Addition(+) and Multiplication(*) operators are not used with the sets.</p>\r\n\r\n<p>7. We can use for loops together the sets.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = {<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>}<br />\r\n&gt;&gt;&gt; for i in a:<br />\r\n&nbsp;&nbsp; &nbsp;print(i)&nbsp;<br />\r\n1<br />\r\n2<br />\r\n3</tt></p>\r\n</div>\r\n\r\n<p>&nbsp;8. We can learn length of a set using len() built-in function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = {<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; len(a)<br />\r\n3</tt></p>\r\n</div>', '<p>You can list set methods using dir() function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dir(set)<br />\r\n[&#39;__and__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iand__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__ior__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__or__&#39;, &#39;__rand__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__ror__&#39;, &#39;__rsub__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__xor__&#39;, &#39;add&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;difference&#39;, &#39;difference_update&#39;, &#39;discard&#39;, &#39;intersection&#39;, &#39;intersection_update&#39;, &#39;isdisjoint&#39;, &#39;issubset&#39;, &#39;issuperset&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;symmetric_difference&#39;, &#39;symmetric_difference_update&#39;, &#39;union&#39;, &#39;update&#39;]</tt></p>\r\n</div>\r\n\r\n<p><strong>&#39;add&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;difference&#39;, &#39;difference_update&#39;, &#39;discard&#39;, &#39;intersection&#39;, &#39;intersection_update&#39;, &#39;isdisjoint&#39;, &#39;issubset&#39;, &#39;issuperset&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;symmetric_difference&#39;, &#39;symmetric_difference_update&#39;, &#39;union&#39;, &#39;update&#39;</strong></p>', '<p>Remove all elements from this set.</p>\r\n\r\n<p>set.clear()</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set(&quot;<span style="color:#e67e22;">abcdefgh</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{&#39;f&#39;, &#39;g&#39;, &#39;a&#39;, &#39;d&#39;, &#39;h&#39;, &#39;c&#39;, &#39;b&#39;, &#39;e&#39;}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.clear()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\nset()</tt></p>\r\n</div>', '<p>Return a shallow copy of a set.</p>\r\n\r\n<p>set.copy()</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([&quot;<span style="color:#e67e22;">London</span>&quot;, &quot;<span style="color:#e67e22;">Paris</span>&quot;, &quot;<span style="color:#e67e22;">Tokyo</span>&quot;, &quot;<span style="color:#e67e22;">Berlin</span>&quot;])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{&#39;London&#39;, &#39;Berlin&#39;, &#39;Tokyo&#39;, &#39;Paris&#39;}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = a.copy()</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b<br />\r\n{&#39;London&#39;, &#39;Berlin&#39;, &#39;Tokyo&#39;, &#39;Paris&#39;}</tt></p>\r\n</div>', '<p>&nbsp;Add an element to a set. This has no effect if the element is already present.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([&quot;<span style="color:#e67e22;">London</span>&quot;, &quot;<span style="color:#e67e22;">Paris</span>&quot;, &quot;<span style="color:#e67e22;">Tokyo</span>&quot;, &quot;<span style="color:#e67e22;">Berlin</span>&quot;])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{&#39;London&#39;, &#39;Berlin&#39;, &#39;Tokyo&#39;, &#39;Paris&#39;}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.add(&quot;<span style="color:#e67e22;">Madrid</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{&#39;Tokyo&#39;, &#39;London&#39;, &#39;Berlin&#39;, &#39;Madrid&#39;, &#39;Paris&#39;}</tt></p>\r\n</div>', '<p>Return the difference of two or more sets as a new set.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">7</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.difference(b)<br />\r\n{3, 6}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; c = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])<br />\r\n&gt;&gt;&gt; a.difference(b, c)<br />\r\n{3}</tt></p>\r\n</div>\r\n\r\n<p>Note : You can use &quot;-&quot; character for same thing.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">7</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a - b<br />\r\n{3, 6}</tt></p>\r\n</div>', '<p>Remove all elements of another set from this set.</p>\r\n\r\n<p>set.difference_update(other_set(s))</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">7</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.difference_update(b)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{3, 6}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b<br />\r\n{1, 2, 4, 5, 7}</tt></p>\r\n</div>', '<p>Remove an element from a set if it is a member. If the element is not a member, do nothing.</p>\r\n\r\n<p>set.discard(item)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; fruits = set([&quot;<span style="color:#e67e22;">apple</span>&quot;, &quot;<span style="color:#e67e22;">orange</span>&quot;, &quot;<span style="color:#e67e22;">strawberry</span>&quot;])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; fruits.discard(&quot;<span style="color:#e67e22;">apple</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; fruits<br />\r\n{&#39;strawberry&#39;, &#39;orange&#39;}</tt></p>\r\n</div>', '<p>Remove an element from a set; it must be a member. If the element is not a member, raise a KeyError.</p>\r\n\r\n<p>set.remove(item)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; fruits = set([&quot;<span style="color:#e67e22;">apple</span>&quot;, &quot;<span style="color:#e67e22;">orange</span>&quot;, &quot;<span style="color:#e67e22;">strawberry</span>&quot;])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; fruits.discard(&quot;<span style="color:#e67e22;">orange</span>&quot;)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; fruits<br />\r\n{&#39;strawberry&#39;, &#39;apple&#39;}</tt></p>\r\n</div>', '<p>Return the intersection of two sets as a new set. (i.e. all elements that are in both sets.)</p>\r\n\r\n<p>set.intersection(set1, &nbsp;,,,)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">7</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.intersection(b)<br />\r\n{1, 2, 5}</tt></p>\r\n</div>', '<p>Update a set with the intersection of itself and another.</p>\r\n\r\n<p>set.intersection_update(set1, ...)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">7</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.intersection_update(b)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{1, 2, 5}</tt></p>\r\n</div>', '<p>Return True if two sets have a null intersection.</p>\r\n\r\n<p>set.isdisjoint(set1)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">7</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.isdisjoint(b)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; c = set([<span style="color:#1abc9c;">9</span>, <span style="color:#1abc9c;">10</span>, <span style="color:#1abc9c;">11</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.isdisjoint(c)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b.isdisjoint(c)<br />\r\nTrue</tt></p>\r\n</div>', '<p>Report whether another set contains this set.</p>\r\n\r\n<p>set.issubset(set1)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; c = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b.issubset(a)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; c.issubset(a)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.issubset(b)<br />\r\nFalse</tt></p>\r\n</div>', '<p>Report whether this set contains another set.</p>\r\n\r\n<p>set.isupperset(set1)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; c = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.issuperset(b)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.issuperset(c)<br />\r\nFalse</tt></p>\r\n</div>', '<p>Return the union of sets as a new set. (i.e. all elements that are in either set.)</p>\r\n\r\n<p>set.union(set1, ...)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">8</span>, <span style="color:#1abc9c;">7</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; c = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">4</span>, <span style="color:#1abc9c;">7</span>, <span style="color:#1abc9c;">12</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.union(b)<br />\r\n{1, 2, 3, 5, 6, 7, 8}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.union(b, c)<br />\r\n{1, 2, 3, 4, 5, 6, 7, 8, 12}</tt></p>\r\n</div>', '<p>Update a set with the union of itself and others.</p>\r\n\r\n<p>set.update(set1)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">8</span>, <span style="color:#1abc9c;">7</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.update(b)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{1, 2, 3, 5, 6, 7, 8}</tt></p>\r\n</div>', '<p>Return the symmetric difference of two sets as a new set. (i.e. all elements that are in exactly one of the sets.)</p>\r\n\r\n<p>set.symmetric_difference(set1)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">8</span>, <span style="color:#1abc9c;">7</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.difference(b)<br />\r\n{5, 6}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b.difference(a)<br />\r\n{8, 7}</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.symmetric_difference(b)<br />\r\n{5, 6, 7, 8}</tt></p>\r\n</div>', '<p>Update a set with the symmetric difference of itself and another.</p>\r\n\r\n<p>set.symmetric_difference_update(set1)</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; b = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">8</span>, <span style="color:#1abc9c;">7</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.symmetric_difference_update(b)</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a<br />\r\n{5, 6, 7, 8}</tt></p>\r\n</div>', '<p>Remove and return an arbitrary set element. Raises KeyError if the set is empty.</p>\r\n\r\n<p>set.pop()</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = set([<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>, <span style="color:#1abc9c;">5</span>, <span style="color:#1abc9c;">6</span>])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.pop()<br />\r\n1</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.pop()<br />\r\n2</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.pop()<br />\r\n3</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.pop()<br />\r\n5</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.pop()<br />\r\n6</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a.pop()<br />\r\n<span style="color:#e74c3c">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#181&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; a.pop()<br />\r\n<strong>KeyError: &#39;pop from an empty set&#39;</strong></span></tt></p>\r\n</div>', '<p>Frozenset is like set. But there is important difference between them. The Frozensets are immutable so it can&#39;t be changed. So They have less methods than sets. Other things are same&nbsp;as sets.</p>', '<p>We have two options to define frozensets.</p>\r\n\r\n<p>1. set() -&gt; new empty set object<br />\r\n&nbsp;2.set(iterable) -&gt; new set object</p>\r\n\r\n<p>iterable can be strings, lists, tuples...</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> frozenset()<br />\r\nfrozenset()</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> frozenset(&quot;abcdefgh&quot;)<br />\r\nfrozenset({&#39;d&#39;, &#39;h&#39;, &#39;c&#39;, &#39;g&#39;, &#39;e&#39;, &#39;b&#39;, &#39;f&#39;, &#39;a&#39;})</tt></p>\r\n</div>', '<p>1. The frozensets can&#39;t have same item which can be one in a&nbsp;frozenset.</p>\r\n\r\n<p>Such as :&nbsp;&quot;banana&quot; string has three&nbsp;&quot;a&quot; and two&nbsp;&quot;n&quot;, frozenset has only one &quot;a&quot; and one &quot;n&quot; character.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; frozenset(&quot;<span style="color:#e67e22;">banana</span>&quot;)<br />\r\n{&#39;b&#39;, &#39;a&#39;, &#39;n&#39;}</tt></p>\r\n</div>\r\n\r\n<p>2. frozensets&nbsp;do&nbsp;not support indexing.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = &nbsp;frozenset([&quot;<span style="color:#e67e22;">John</span>&quot;, &quot;<span style="color:#e67e22;">Jack</span>&quot;, &quot;<span style="color:#e67e22;">Brad</span>&quot;, &quot;<span style="color:#e67e22;">Angelina</span>&quot;])</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; a[<span style="color:#1abc9c;">0</span>]<br />\r\n<span style="color:#e74c3c;">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#5&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; a[0]<br />\r\nTypeError: &#39;frozenset&#39; object does not support indexing</span></tt></p>\r\n</div>\r\n\r\n<p>3. An Element&nbsp;of a frozenset can be only immutable type which are string, tuple and number. So you can&#39;t add list, dictionary and frozenset inside it.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = frozenset([&quot;<span style="color:#e67e22;">a</span>&quot;, &quot;<span style="color:#e67e22;">b</span>&quot;, [&quot;<span style="color:#e67e22;">nested_list</span>&quot;]])<br />\r\n<span style="color:#e74c3c;">Traceback (most recent call last):<br />\r\n&nbsp; File &quot;&lt;pyshell#84&gt;&quot;, line 1, in &lt;module&gt;<br />\r\n&nbsp; &nbsp; a = frozenset([&quot;a&quot;, &quot;b&quot;, [&quot;nested_list&quot;]])<br />\r\n<strong>TypeError: unhashable type: &#39;list&#39;</strong></span></tt></p>\r\n</div>\r\n\r\n<p>4. Addition(+) and Multiplication(*) operators are not used with the frozensets.</p>\r\n\r\n<p>5. We can use for loops together the frozensets.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = frozenset({<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>})<br />\r\n&gt;&gt;&gt; for i in a:<br />\r\n&nbsp;&nbsp; &nbsp;print(i)&nbsp;<br />\r\n1<br />\r\n2<br />\r\n3</tt></p>\r\n</div>\r\n\r\n<p>&nbsp;6. We can learn length of a frozenset using len() built-in function.</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; a = frozenset({<span style="color:#1abc9c;">1</span>, <span style="color:#1abc9c;">2</span>, <span style="color:#1abc9c;">3</span>})</tt></p>\r\n\r\n<p><tt>&gt;&gt;&gt; len(a)<br />\r\n3</tt></p>\r\n</div>', '<p>We can list frozenset methods using built-in dir() function</p>\r\n\r\n<div class="codes">\r\n<p><tt>&gt;&gt;&gt; dir(frozenset)<br />\r\n[&#39;__and__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__or__&#39;, &#39;__rand__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__ror__&#39;, &#39;__rsub__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__xor__&#39;, &#39;copy&#39;, &#39;difference&#39;, &#39;intersection&#39;, &#39;isdisjoint&#39;, &#39;issubset&#39;, &#39;issuperset&#39;, &#39;symmetric_difference&#39;, &#39;union&#39;]</tt></p>\r\n</div>', '<p>Return a shallow copy of a frozenset.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = frozenset([&quot;London&quot;, &quot;Paris&quot;, &quot;Tokyo&quot;, &quot;Berlin&quot;])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a<br />\r\nfrozenset({&#39;London&#39;, &#39;Paris&#39;, &#39;Berlin&#39;, &#39;Tokyo&#39;})</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b = a.copy()</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b<br />\r\nfrozenset({&#39;London&#39;, &#39;Paris&#39;, &#39;Berlin&#39;, &#39;Tokyo&#39;})</tt></p>\r\n</div>', '<p>Return the difference of two or more sets as a new set.</p>\r\n\r\n<p><strong><span style="color:#c0392b">difference(frozenset1, frozenset2, ,,,)&nbsp;</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = frozenset([1, 2, 3, 5, 6])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b = frozenset([1, 2, 4, 5, 7])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.difference(b)<br />\r\nfrozenset({3, 6})</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> c = set([1, 2, 4, 5, 6])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.difference(b, c)<br />\r\nfrozenset({3})</tt></p>\r\n</div>\r\n\r\n<blockquote>\r\n<p>difference() metodunun yaptığı aynı işi &quot;-&quot; karakteri ile de yapmak m&uuml;mk&uuml;nd&uuml;r.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = frozenset([1, 2, 3, 5, 6])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b = frozenset([1, 2, 4, 5, 7])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a - b<br />\r\nfrozenset({3, 6})</tt></p>\r\n</div>\r\n</blockquote>', '<p>Return the intersection of two sets as a new set.</p>\r\n\r\n<p><strong><span style="color:#c0392b">intersection(set1, set2, ,,,)</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = frozenset([1, 2, 3, 5, 6])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b = frozenset([1, 2, 4, 5, 7])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.intersection(b)<br />\r\nfrozenset({1, 2, 5})</tt></p>\r\n</div>', '<p>Return True if two sets have a null intersection.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = frozenset([1, 2, 3, 5, 6])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b = frozenset([1, 2, 4, 5, 7])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.isdisjoint(b)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> c = frozenset([9, 10, 11])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.isdisjoint(c)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b.isdisjoint(c)<br />\r\nTrue</tt></p>\r\n</div>', '<p>Report whether another set contains this set.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = frozenset([1, 2, 3, 5, 6])<span style="color:red">&gt;&gt;&gt;</span> b = frozenset([1, 2, 3])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> c = frozenset([1, 2, 3, 4])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b.issubset(a)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> c.issubset(a)<br />\r\nFalse</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.issubset(b)<br />\r\nFalse&nbsp;</tt></p>\r\n</div>', '<p>Report whether this set contains another set.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = frozenset([1, 2, 3, 5, 6])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b = frozenset([1, 2, 3])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> c = frozenset([1, 2, 3, 4])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.issuperset(b)<br />\r\nTrue</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.issuperset(c)<br />\r\nFalse</tt></p>\r\n</div>', '<p>Return the union of sets as a new set.</p>\r\n\r\n<p><strong><span style="color:#c0392b">union(set1, set2, ...)</span></strong></p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = frozenset([1, 2, 3, 5, 6])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b = frozenset([1, 2, 3, 8, 7])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> c = frozenset([1, 2, 3, 4, 7, 12])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.union(b)<br />\r\nfrozenset({1, 2, 3, 5, 6, 7, 8})</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.union(b, c)<br />\r\nfrozenset({1, 2, 3, 4, 5, 6, 7, 8, 12})</tt></p>\r\n</div>', '<p>Return the symmetric difference of two sets as a new set.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = frozenset([1, 2, 3, 5, 6])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b = frozenset([1, 2, 3, 8, 7])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.difference(b)<br />\r\nfrozenset({5, 6})</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b.difference(a)<br />\r\nfrozenset({8, 7})</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.symmetric_difference(b)<br />\r\nfrozenset({5, 6, 7, 8</tt>})</p>\r\n</div>\r\n\r\n<blockquote>\r\n<p>Dondurulmuş k&uuml;melere ait metotları kullanırken, arg&uuml;man olarak dizi &ouml;zelliğine sahip bir verinin yani birtakım elemanlardan oluşan bir veri tipinin de verilebileceğini unutmayalım.</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a = frozenset([&quot;London&quot;, &quot;Paris&quot;, &quot;Tokyo&quot;, &quot;Berlin&quot;])</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> b = {&quot;London&quot;}</tt></p>\r\n\r\n<p><tt><span style="color:red">&gt;&gt;&gt;</span> a.difference(b)<br />\r\nfrozenset({&#39;Tokyo&#39;, &#39;Paris&#39;, &#39;Berlin&#39;})</tt></p>\r\n</div>\r\n</blockquote>', '<p>When we type a program or code, we can take the unfiriendly error messages from Python. Such as:</p>\r\n\r\n<p>SyntaxError<br />\r\nValueError<br />\r\nIndexError<br />\r\nZeroDivisionError<br />\r\nNameError<br />\r\nIOError<br />\r\nTypeError</p>\r\n\r\n<p>To catch these errors, it is used try,,, except... statements.</p>', '<p>These expected or unexpected errors can be handled by &quot;try / except&quot; statement which has two main blocks.&nbsp;</p>\r\n\r\n<p><em><strong>try:</strong>&nbsp;</em>If an error occurs in this block,&nbsp;Python jumps out of the try block to except block.&nbsp;If there is no error, except block doesn&#39;t work.&nbsp;</p>\r\n\r\n<p><em><strong>except:</strong></em>&nbsp;&nbsp;you can&nbsp;add some statements under this block. They are executed,&nbsp;If an error occurs in try block, If there is no error, added statements doesn&#39;t work and&nbsp;this block&nbsp;are ignored.&nbsp;</p>\r\n\r\n<div class="codes">\r\n<p><tt><span style="color:#e74c3c;"><b>example.py</b></span></tt></p>\r\n\r\n<p><tt>number = input(&quot;<span style="color:#e67e22;">Please, Enter a number:</span> &quot;)</tt></p>\r\n\r\n<p><tt>try:<br />\r\n&nbsp; &nbsp; print(int(number) ** <span style="color:#1abc9c;">2</span>)</tt></p>\r\n\r\n<p><tt>except:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">You don&#39;t enter a number.</span>&quot;)</tt></p>\r\n</div>\r\n\r\n<p>Above the example&nbsp;if an user enter a number, only try block does work. except block doesn&#39;t work. So&nbsp;&nbsp;<em>print(int(number) ** 2) works.</em></p>\r\n\r\n<p>If an user enter not a number such as &quot;five&quot;, &nbsp;an Valueerror occurs because of number**2. So&nbsp;Python jumps out of the try block to except block. <em>print(&quot;You don&#39;t enter a number.&quot;) works.</em></p>\r\n\r\n<p>If you are sure about errortype, You can use like this, too</p>\r\n\r\n<p><span style="color:#e74c3c;">example1.py</span></p>\r\n\r\n<div class="codes">\r\n<p><tt>number = input(&quot;<span style="color:#e67e22;">Please, Enter a number:</span> &quot;)</tt></p>\r\n\r\n<p><tt>try:<br />\r\n&nbsp; &nbsp; print(int(number) ** <span style="color:#1abc9c;">2</span>)</tt></p>\r\n\r\n<p><tt>except ValuError:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">You don&#39;t enter a number.</span>&quot;)</tt></p>\r\n</div>\r\n\r\n<p>You can add&nbsp;more except&nbsp;block too</p>\r\n\r\n<p>Now it&nbsp;is added&nbsp;ZeroDivisionError&nbsp;to except block against possibility of 100/0</p>\r\n\r\n<div class="codes">\r\n<p><span style="color:#e74c3c;"><tt>example2.py</tt></span></p>\r\n\r\n<p><tt>number = input(&quot;<span style="color:#e67e22;">Please, Enter a number:</span> &quot;)</tt></p>\r\n\r\n<p><tt>try:<br />\r\n&nbsp; &nbsp; print(<span style="color:#1abc9c;">100</span>/ int(number))</tt></p>\r\n\r\n<p><tt>except ZeroDivisionError:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">You can not divide a number with &#39;0&#39;</span> &quot;)<br />\r\nexcept ValueError:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">You don&#39;t enter a number.</span>&quot;)</tt></p>\r\n</div>\r\n\r\n<p>You can use like this too:&nbsp;except (ValueError, ZeroDivisionError):</p>\r\n\r\n<div class="codes">\r\n<p><tt>example3.py</tt></p>\r\n\r\n<p><tt>number = input(&quot;<span style="color:#e67e22;">Please, Enter a number:</span> &quot;)</tt></p>\r\n\r\n<p><tt>try:<br />\r\n&nbsp; &nbsp; print(<span style="color:#1abc9c;">100</span>/ int(number))</tt></p>\r\n\r\n<p><tt>except (ValueError, ZeroDivisionError):<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">An error occurs</span>&quot;)</tt></p>\r\n</div>', '<p>If you want to show Pyhon error message, you can additionally use &quot;as&quot; statement next to except statement.</p>\r\n\r\n<div class="codes">\r\n<p><tt>example.py</tt></p>\r\n\r\n<p><tt>number = input(&quot;<span style="color:#e67e22;">Please, Enter a number:</span> &quot;)</tt></p>\r\n\r\n<p><tt>try:<br />\r\n&nbsp; &nbsp; print(int(number) ** <span style="color:#1abc9c;">2</span>)</tt></p>\r\n\r\n<p><tt>except ValueError as my_error:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">You don&#39;t enter a number.</span>&quot;)<br />\r\n&nbsp; &nbsp; print(my_error)</tt></p>\r\n\r\n<hr />\r\n<p><span style="color:#e74c3c;">Please, Enter a number: kk<br />\r\nYou don&#39;t enter a number.<br />\r\ninvalid literal for int() with base 10: &#39;kk&#39;</span></p>\r\n</div>\r\n\r\n<p>Above example &quot;invalid literal for int() with base 10: &#39;kk&#39; is a Python error message.</p>', '<p>If you want to divide errors step by step, You can use &quot;else&quot; statement.</p>\r\n\r\n<div class="codes">\r\n<p><tt>example.py</tt></p>\r\n\r\n<p><tt>try:<br />\r\n&nbsp; &nbsp; number = int(input(&quot;<span style="color:#e67e22;">Please, Enter a number:</span> &quot;))<br />\r\nexcept ValueError:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">You don&#39;t enter a number.</span>&quot;)</tt></p>\r\n\r\n<p><tt>else:<br />\r\n&nbsp; &nbsp; try:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(<span style="color:#1abc9c;">100</span>/ number)<br />\r\n&nbsp; &nbsp; except ZeroDivisionError:<br />\r\n&nbsp; &nbsp; &nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">You can not divide a number with &#39;0&#39;</span> &quot;)</tt></p>\r\n</div>\r\n\r\n<p>If you enter not a number, you will see &quot;&quot;You don&#39;t enter a number.&quot; If you enter 0, you will see&nbsp;&nbsp;&quot;You can not divide a number with &#39;0&#39;&quot;</p>', '<p>finally block works, whichever error occurs or not. It is very useful about file execution.</p>\r\n\r\n<div class="codes">\r\n<p><span style="color:#e74c3c;"><tt># example.py</tt></span></p>\r\n\r\n<p><tt>number = input(&quot;<span style="color:#e67e22;">Please, Enter a number:</span> &quot;)</tt></p>\r\n\r\n<p><tt>try:<br />\r\n&nbsp; &nbsp; print(int(number) ** <span style="color:#1abc9c;">2</span>)</tt></p>\r\n\r\n<p><tt>except ValueError as my_error:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">You don&#39;t enter a number.</span>&quot;)<br />\r\n&nbsp; &nbsp; print(my_error)</tt></p>\r\n\r\n<p><tt>finally:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">I am the last station</span>&quot;)</tt></p>\r\n</div>', '<p>Although there is no error, sometimes you want to show error message. So You can use raise statement. If the raise statement works, a program ends.</p>\r\n\r\n<p><strong>Example8: If an user enter 13 number, program ends and see&nbsp;<em>&#39;raise Exception(&quot;I hate 13 number. So you can&#39;t use this number&quot;)<br />\r\nException: I hate 13 number. So you can&#39;t use this number&#39;</em>&nbsp;message</strong></p>\r\n\r\n<div class="codes">\r\n<p><tt>number = input(&quot;<span style="color:#e67e22;">Please, Enter a number:</span> &quot;)</tt></p>\r\n\r\n<p><tt>if int(number) == <span style="color:#1abc9c;">13</span>:<br />\r\n&nbsp; &nbsp; raise Exception(&quot;<span style="color:#e67e22;">I hate 13 number. So you can&#39;t use this number</span>&quot;)</tt></p>\r\n\r\n<p><tt>try:<br />\r\n&nbsp; &nbsp; print(int(number) ** <span style="color:#1abc9c;">2</span>)</tt></p>\r\n\r\n<p><tt>except ValueError as my_error:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">You don&#39;t enter a number.</span>&quot;)<br />\r\n&nbsp; &nbsp; print(my_error)</tt></p>\r\n</div>\r\n\r\n<p>You can use raise statement under except block to show one more error message.</p>\r\n\r\n<div class="codes">\r\n<p><tt>number = input(&quot;<span style="color:#e67e22;">Please, Enter a number:</span> &quot;)<br />\r\ntry:<br />\r\n&nbsp; &nbsp; print(int(number) ** <span style="color:#1abc9c;">2</span>)</tt></p>\r\n\r\n<p><tt>except:<br />\r\n&nbsp; &nbsp; raise RuntimeError(&quot;<span style="color:#e67e22;">Something bad happened</span>&quot;)</tt></p>\r\n</div>\r\n\r\n<p>when this codes run and enter a not number, You will see these error messages:</p>\r\n\r\n<p>Please, Enter a number: bbhbhh<br />\r\nTraceback (most recent call last):<br />\r\nValueError: invalid literal for int() with base 10: &#39;bbhbhh&#39;<br />\r\nDuring handling of the above exception, another exception occurred:</p>\r\n\r\n<p>Traceback (most recent call last):<br />\r\n&nbsp; &nbsp; raise RuntimeError(&quot;<strong>Something bad happened</strong>&quot;)<br />\r\nRuntimeError:&nbsp;<strong>Something bad happened</strong></p>', '<p>You can use only try... except... blocks to find&nbsp;all errors.</p>\r\n\r\n<div class="codes">\r\n<p><tt>number = input(&quot;<span style="color:#e67e22;">Please, Enter a number:</span> &quot;)<br />\r\ntry:<br />\r\n&nbsp; &nbsp; print(<span style="color:#1abc9c;">100</span>/ int(number))</tt></p>\r\n\r\n<p><tt>except:<br />\r\n&nbsp; &nbsp; print(&quot;<span style="color:#e67e22;">An error occurs</span>&quot;)</tt></p>\r\n</div>'], [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], ['In this tutorial you can learn numbers in Python.', 'In this tutorial you can learn integers in Python.', 'In this tutorial you can learn decintegers in Python.', 'In this tutorial you can learn bininteger in Python.', 'In this tutorial you can learn octinteger in Python.', 'In this tutorial you can learn hexinteger in Python.', 'In this tutorial you can learn how to use convert integers in Python.', 'In this tutorial you can learn floats in Python.', 'In this tutorial you can learn complex numbers in Python.', 'In this tutorial you can learn common number methods and attributes in Python.', 'In this tutorial you can learn integer methods in Python.', 'In this tutorial you can learn float methods in Python.', 'In this tutorial you can learn math module in Python.', 'In this tutorial you can learn  math methods and attributes in Python.', 'In this tutorial you can learn how to use ceil() math method in Python.', 'In this tutorial you can learn how to use floor() math method in Python.', 'In this tutorial you can learn how to use radians() math method in Python.', 'In this tutorial you can learn how to use degrees() math method in Python.', 'In this tutorial you can learn how to use sin() math method in Python.', 'In this tutorial you can learn how to use cos() math method in Python.', 'In this tutorial you can learn how to use tan() math method in Python.', 'In this tutorial you can learn how to use acos() math method in Python.', 'In this tutorial you can learn how to use asin() math method in Python.', 'In this tutorial you can learn how to use atan() math method in Python.', 'In this tutorial you can learn how to use atan2() math method in Python.', 'In this tutorial you can learn how to use cosh() math method in Python.', 'In this tutorial you can learn how to use sinh() math method in Python.', 'In this tutorial you can learn how to use tanh() math method in Python.', 'In this tutorial you can learn how to use copysign() math method in Python.', 'In this tutorial you can learn how to use erf() math method in Python.', 'In this tutorial you can learn how to use erfc() math method in Python.', 'In this tutorial you can learn how to use exp() math method in Python.', 'In this tutorial you can learn how to use expm1() math method in Python.', 'In this tutorial you can learn how to use fabs() math method in Python.', 'In this tutorial you can learn how to use factorial() math method in Python.', 'In this tutorial you can learn how to use fmod() math method in Python.', 'In this tutorial you can learn how to use frexp() math method in Python.', 'In this tutorial you can learn how to use fsum() math method in Python.', 'In this tutorial you can learn how to use gamma() math method in Python.', 'In this tutorial you can learn how to use gcd() math method in Python.', 'In this tutorial you can learn how to use hypot() math methodin Python.', 'In this tutorial you can learn how to use isclose() math method in Python.', 'In this tutorial you can learn how to use isfinite() in Python.', 'In this tutorial you can learn how to use isinf() in Python.', 'In this tutorial you can learn how to use isnan() in Python.', 'In this tutorial you can learn how to use ldexp() in Python.', 'In this tutorial you can learn how to use lgamma() in Python.', 'In this tutorial you can learn how to use log() in Python.', 'In this tutorial you can learn how to use log10() in Python.', 'In this tutorial you can learn how to use log2() in Python.', 'In this tutorial you can learn how to use log1p() in Python.', 'In this tutorial you can learn how to use modf() in Python.', 'In this tutorial you can learn how to use pow() in Python.', 'In this tutorial you can learn how to use sqrt() in Python.', 'In this tutorial you can learn how to use trunc() in Python.', 'In this tutorial you can learn sets in Python.', 'In this tutorial you can learn how to define sets in Python.', 'In this tutorial you can learn set features in Python.', 'In this tutorial you can learn set methods in Python.', 'In this tutorial you can learn how to use clear() set method  in Python.', 'In this tutorial you can learn how to use copy() set method in Python.', 'In this tutorial you can learn how to use add() set method in Python.', 'In this tutorial you can learn how to use difference() set method in Python.', 'In this tutorial you can learn how to use difference_update() set method in Python.', 'In this tutorial you can learn how to use discard() set method  in Python.', 'In this tutorial you can learn how to use remove() set method in Python.', 'In this tutorial you can learn how to use intersection() set method in Python.', 'In this tutorial you can learn how to use intersection_update() set method in Python.', 'In this tutorial you can learn how to use isdisjoint set method in Python.', 'In this tutorial you can learn how to use issubset() set method in Python.', 'In this tutorial you can learn how to use issuperset() set method in Python.', 'In this tutorial you can learn how to use union() set method in Python.', 'In this tutorial you can learn how to use set.update() set method in Python.', 'In this tutorial you can learn how to use symmetric_difference() set method in Python.', 'In this tutorial you can learn how to use symmetric_difference_ update set method in Python.', 'In this tutorial you can learn how to use pop() set method in Python.', 'In this tutorial you can learn frozensets in Python.', 'In this tutorial you can learn how to define frozensets in Python.', 'In this tutorial you can learn frozenset features in Python.', 'In this tutorial you can learn frozenset methods in Python.', 'In this tutorial you can learn how to use copy() frozenset method  in Python.', 'In this tutorial you can learn how to use difference() frozenset method  in Python.', 'In this tutorial you can learn how to use intersection() frozenset method  in Python.', 'In this tutorial you can learn how to use isdisjoint() frozenset method  in Python.', 'In this tutorial you can learn how to use issubset()  frozenset method  in Python.', 'In this tutorial you can learn how to use isupperset() frozenset method  in Python.', 'In this tutorial you can learn how to use union() frozenset method  in Python.', 'In this tutorial you can learn how to use symmetric_ difference() frozenset method  in Python.', 'In this tutorial you can learn how to use try except- catching exceptions in Python.', 'In this tutorial you can learn how to use try except in Python.', 'In this tutorial you can learn how to use try except as in Python.', 'In this tutorial you can learn how to use try except else in Python.', 'In this tutorial you can learn how to use try except finally in Python.', 'In this tutorial you can learn how to use raise in Python.', 'In this tutorial you can learn how to catching all errors in Python.'], ['Numbers', 'Integers', 'Decinteger', 'Bininteger', 'Octinteger', 'Hexinteger', 'Converting integers', 'Floats', 'Complex numbers', 'Common number methods and attributes', 'Integer methods', 'Float methods', 'math', 'math methods and attributes', 'ceil(x), math.ceil math method', 'floor(x), math.floor', 'radians(x), math.radians', 'degrees(x), math.degrees', 'sin(x), math.sin', 'cos(x), math.cos', 'tan(x), math.tan', 'acos(x), math.acos', 'asin(x), math.asin', 'atan(x), math.atan', 'atan2(y, x), math.atan2', 'cosh(x), math.cosh', 'sinh(x), math.sinh', 'tanh(x), math.tanh', 'copysign(x, y), math', 'erf(x), math.erf', 'erfc(x), math.erfc', 'exp(x), math.exp', 'expm1(x), math.expml', 'fabs(), math.fabs', 'factorial(x), math.factorial', 'fmod(x, y), math.fmod', 'frexp(x), math.frexp', 'fsum(x), math.fsum', 'gamma(x), math.gamma', 'gcd(x, y), math.gcd', 'hypot(x, y), math.hypot', 'isclose(), math.isclose', 'isfinite(x), math.isfinite', 'isinf(x), mat.isinf', 'isnan(x), math.isnan', 'ldexp(x, i), math.ldexp', 'lgamma(x), math.lgamma', 'log(x, y), math.log', 'log10(x), math.log10', 'log2(x), math.log2', 'log1p(x), math.log1p', 'modf(x), math.modf', 'pow(x, y), math.pow', 'sqrt(x), math.sqrt', 'trunc(x), math.trunc', 'Sets', 'Define sets', 'Set features', 'Set methods', 'clear() set method', 'copy()', 'add()', 'difference()', 'difference_update()', 'discard()', 'remove()', 'intersection()', 'intersection_update()', 'isdisjoint', 'issubset()', 'issuperset()', 'union()', 'set.update()', 'symmetric_difference()', 'symmetric_difference_ update', 'pop()', 'Frozensets', 'Define frozensets', 'Frozenset features', 'Frozenset methods', 'copy()', 'difference()', 'intersection()', 'isdisjoint()', 'issubset(x)', 'isupperset(x)', 'union()', 'symmetric_ difference(x)', 'try except- catching exceptions', 'try except', 'try except as', 'try except else', 'try except finally', 'raise', 'catching all errors'], ['Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'NUmbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Numbers', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Sets', 'Frozensets', 'Frozensets', 'Frozensets', 'Frozensets', 'Frozensets', 'Frozensets', 'Frozensets', 'Frozensets', 'Frozensets', 'Frozensets', 'Frozensets', 'Frozensets', 'try except', 'try except', 'try except', 'try except', 'try except', 'try except', 'try except'], ['ana1', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'ana3', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'ana1', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'ana', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'ana', '-', '-', '-', '-', '-', '-']]